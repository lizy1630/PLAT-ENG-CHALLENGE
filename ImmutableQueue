
import java.util.*;  

public final class ImmutableQueue<T> {
	
	
	    private final ImmutableStack<T> inStack;  
	    private final ImmutableStack<T> outStack;  
	    private final int size;
	      
	    public ImmutableQueue() { 
	    	size = 0;
	        inStack = null;  
	        outStack = null;  
	    }  
	    
	    private ImmutableQueue(ImmutableStack<T> in, ImmutableStack<T> out) {  
	        inStack = in;  
	        outStack = out;  
	        size = inStack.size() + outStack.size();
	    }  
	      
	     public ImmutableQueue<T> enQueue(T t) {  
	         if (t == null) 
	             throw new NullPointerException();  
	         return new ImmutableQueue<T>(inStack.push(t), outStack);  
	     }  
	       
	     public ImmutableQueue<T> deQueue() {  
	         if (isEmpty()) 
	             throw new EmptyStackException();  
	         if (size == 1) 
	             return new ImmutableQueue<T>();  
	         //if out stack is empty and size>1 then use reversed in stack to pop and used it as out stack, in stack sets to empty
	         if (outStack.isEmpty()) {  
	             ImmutableStack<T> temp = inStack.reverse();  
	             return new ImmutableQueue<T>(new ImmutableStack<T>(),temp.pop());  
	         }  
	        return new ImmutableQueue<T>(inStack, outStack.pop());  
	     }  
	       
	      public T head() {  
	          if (isEmpty())
	              throw new NoSuchElementException();  
	          //out stack empty, use reversed in stack and get the head
	          if (outStack.isEmpty()) {  
	              ImmutableStack<T> temp = inStack.reverse();  
	              return temp.peek();  
	          }  
	          return outStack.peek();  
	      }  
	      
	       public int size() {  
	          return size;  
	       }  
	         
	       public boolean isEmpty() {  
	           return size==0;  
	       }  
	         
}
