
import java.util.EmptyStackException;

public final class ImmutableStack<T>  {
	
	    private final int size;
	    private final T head;
	    private final ImmutableStack<T> tail; 

	    public ImmutableStack() {
	        size = 0;
	        tail = null;
	        head = null;
	    }
	    private ImmutableStack(T h, ImmutableStack<T> t) {  
	    	head = h;  
	        tail = t;  
	        size = tail.size() + 1;  
	    }  
	    
	    public ImmutableStack<T> push(T ele) {
	        if (ele == null)
	            throw new NullPointerException();
	        else
		        return new ImmutableStack<T>(ele, this);
	    }
	    
	    //usually it should return 2 values(head + trail) but to simplify just return tail stack
	    public ImmutableStack<T> pop() {
	        if (size == 0)
	            throw new EmptyStackException();
	        return tail;
	    }
	    
	    public T peek() {
	        if (size == 0)
	            throw new EmptyStackException();
	        return head;
	    }
	    
	    public int size() {
	        return size;
	    }
	    
	    public boolean isEmpty() {
	    	return size==0;
	    }
	    
	    public ImmutableStack<T> reverse() {  
	    	ImmutableStack<T> st = new ImmutableStack<T>();  
	        if (isEmpty()) 
	            return st;  
	        //reverse the stack by traversing 
	        ImmutableStack<T> temp = this;  
	        while (!temp.isEmpty()) {  
	            st = st.push(temp.peek());  
	            temp = temp.pop();  
	        }  
	        return st;  
	          
	    }  


}
